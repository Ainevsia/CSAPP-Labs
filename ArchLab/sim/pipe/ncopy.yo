                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # cpe - 8.86
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
0x000: 6222                 | 	andq %rdx,%rdx		
0x002: c0f2f8ffffffffffffff |     iaddq $-8,%rdx
0x00c: 751e00000000000000   |     jge MoreThanEight
0x015: 708d01000000000000   |     jmp LessThanEight
                            | #
0x01e:                      | MoreThanEight:
0x01e: 50870000000000000000 |     mrmovq (%rdi), %r8	# read val from src...
0x028: 50970800000000000000 |     mrmovq 8(%rdi), %r9
0x032: 50a71000000000000000 |     mrmovq 16(%rdi), %r10
0x03c: 50b71800000000000000 |     mrmovq 24(%rdi), %r11
0x046: 6288                 |     andq %r8,%r8
0x048: 40860000000000000000 |     rmmovq %r8, (%rsi)	
0x052: 716500000000000000   | 	jle epos0		
0x05b: c0f00100000000000000 | 	iaddq $1, %rax		
0x065:                      | epos0:
0x065: 6299                 |     andq %r9,%r9
0x067: 40960800000000000000 |     rmmovq %r9, 8(%rsi)	# ...and store it to dst
0x071: 718400000000000000   | 	jle epos1		# if so, goto Npos:
0x07a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x084:                      | epos1:
0x084: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x086: 40a61000000000000000 |     rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x090: 71a300000000000000   | 	jle epos2		# if so, goto Npos:
0x099: c0f00100000000000000 |     iaddq $1, %rax		# count++
0x0a3:                      | epos2:
0x0a3: 62bb                 |     andq %r11, %r11		# val <= 0?
0x0a5: 40b61800000000000000 |     rmmovq %r11, 24(%rsi)	# ...and store it to dst
0x0af: 71c200000000000000   | 	jle epos3		# if so, goto Npos:
0x0b8: c0f00100000000000000 |     iaddq $1, %rax		# count++
0x0c2:                      | epos3:
0x0c2: 50872000000000000000 |     mrmovq 32(%rdi), %r8	# read val from src...
0x0cc: 50972800000000000000 |     mrmovq 40(%rdi), %r9
0x0d6: 50a73000000000000000 |     mrmovq 48(%rdi), %r10
0x0e0: 50b73800000000000000 |     mrmovq 56(%rdi), %r11
0x0ea: 6288                 |     andq %r8,%r8
0x0ec: 40862000000000000000 |     rmmovq %r8, 32(%rsi)	
0x0f6: 710901000000000000   | 	jle epos4		
0x0ff: c0f00100000000000000 | 	iaddq $1, %rax		
0x109:                      | epos4:
0x109: 6299                 |     andq %r9,%r9
0x10b: 40962800000000000000 |     rmmovq %r9, 40(%rsi)	# ...and store it to dst
0x115: 712801000000000000   | 	jle epos5		# if so, goto Npos:
0x11e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x128:                      | epos5:
0x128: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x12a: 40a63000000000000000 |     rmmovq %r10, 48(%rsi)	# ...and store it to dst
0x134: 714701000000000000   | 	jle epos6		# if so, goto Npos:
0x13d: c0f00100000000000000 |     iaddq $1, %rax		# count++
0x147:                      | epos6:
0x147: 62bb                 |     andq %r11, %r11		# val <= 0?
0x149: 40b63800000000000000 |     rmmovq %r11, 56(%rsi)	# ...and store it to dst
0x153: 716601000000000000   | 	jle epos7		# if so, goto Npos:
0x15c: c0f00100000000000000 |     iaddq $1, %rax		# count++
0x166:                      | epos7:
                            | 
0x166: c0f64000000000000000 |     iaddq $64, %rsi		# dst++
0x170: c0f74000000000000000 |     iaddq $64, %rdi		# src++
0x17a: c0f2f8ffffffffffffff |     iaddq $-8, %rdx		
0x184: 751e00000000000000   |     jge MoreThanEight	
                            | #
                            | 
0x18d:                      | LessThanEight:
0x18d: c0f20400000000000000 |     iaddq $4,%rdx
0x197: 75a901000000000000   |     jge MoreThanFour
0x1a0: 70f301000000000000   |     jmp LessThanFour
                            | 
0x1a9:                      | MoreThanFour:
                            | #     mrmovq (%rdi), %r8	# read val from src...
                            | #     mrmovq 8(%rdi), %r9
                            | #     mrmovq 16(%rdi), %r10
                            | #     mrmovq 24(%rdi), %r11
                            | #     andq %r8,%r8
                            | #     rmmovq %r8, (%rsi)	
                            | # 	jle pos0		
                            | # 	iaddq $1, %rax		
                            | # pos0:
                            | #     andq %r9,%r9
                            | #     rmmovq %r9, 8(%rsi)	# ...and store it to dst
                            | # 	jle pos1		# if so, goto Npos:
                            | # 	iaddq $1, %rax		# count++
                            | # pos1:
                            | # 	andq %r10, %r10		# val <= 0?
                            | #     rmmovq %r10, 16(%rsi)	# ...and store it to dst
                            | # 	jle pos2		# if so, goto Npos:
                            | #     iaddq $1, %rax		# count++
                            | # pos2:
                            | #     andq %r11, %r11		# val <= 0?
                            | #     rmmovq %r11, 24(%rsi)	# ...and store it to dst
                            | # 	jle pos3		# if so, goto Npos:
                            | #     iaddq $1, %rax		# count++
                            | # pos3:
                            | #     iaddq $32, %rsi		# dst++
                            | #     iaddq $32, %rdi		# src++
                            | #     iaddq $-4, %rdx		
                            | #     jge MoreThanFour	
0x1a9: c0f20200000000000000 |     iaddq $2,%rdx
0x1b3: 75c501000000000000   |     jge l67 
0x1bc: 70d701000000000000   |     jmp l45
0x1c5:                      | l67:
0x1c5: 736602000000000000   |     je l6
0x1ce: 703d02000000000000   |     jmp l7
0x1d7:                      | l45:
0x1d7: c0f20200000000000000 |     iaddq $2,%rdx
0x1e1: 73b802000000000000   |     je l4
0x1ea: 708f02000000000000   |     jmp l5
                            | 
0x1f3:                      | LessThanFour:
0x1f3: c0f20200000000000000 |     iaddq $2,%rdx
0x1fd: 750f02000000000000   |     jge l23 
0x206: 702102000000000000   |     jmp l01
0x20f:                      | l23:
0x20f: 730a03000000000000   |     je l2
0x218: 70e102000000000000   |     jmp l3
0x221:                      | l01:
0x221: c0f20200000000000000 |     iaddq $2,%rdx
0x22b: 735c03000000000000   |     je Done
0x234: 703303000000000000   |     jmp l1
                            |     
0x23d:                      | l7:
0x23d: 50a73800000000000000 |     mrmovq 56(%rdi), %r10
0x247: 62aa                 | 	andq %r10, %r10		
0x249: 40a63800000000000000 |     rmmovq %r10, 56(%rsi)	
0x253: 716602000000000000   | 	jle l6	
0x25c: c0f00100000000000000 |     iaddq $1, %rax	
0x266:                      | l6:
0x266: 50a73000000000000000 |     mrmovq 48(%rdi), %r10
0x270: 62aa                 | 	andq %r10, %r10		
0x272: 40a63000000000000000 |     rmmovq %r10, 48(%rsi)	
0x27c: 718f02000000000000   | 	jle l5		
0x285: c0f00100000000000000 |     iaddq $1, %rax	
0x28f:                      | l5:
0x28f: 50a72800000000000000 |     mrmovq 40(%rdi), %r10
0x299: 62aa                 | 	andq %r10, %r10		
0x29b: 40a62800000000000000 |     rmmovq %r10, 40(%rsi)	
0x2a5: 71b802000000000000   | 	jle l4		
0x2ae: c0f00100000000000000 |     iaddq $1, %rax	
0x2b8:                      | l4:
0x2b8: 50a72000000000000000 |     mrmovq 32(%rdi), %r10
0x2c2: 62aa                 | 	andq %r10, %r10		
0x2c4: 40a62000000000000000 |     rmmovq %r10, 32(%rsi)	
0x2ce: 71e102000000000000   | 	jle l3		
0x2d7: c0f00100000000000000 |     iaddq $1, %rax	
0x2e1:                      | l3:
0x2e1: 50a71000000000000000 |     mrmovq 16(%rdi), %r10
0x2eb: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x2ed: 40a61000000000000000 |     rmmovq %r10, 16(%rsi)	# ...and store it to dst
0x2f7: 710a03000000000000   | 	jle l2		# if so, goto Npos:
0x300: c0f00100000000000000 |     iaddq $1, %rax		# count++
0x30a:                      | l2:
0x30a: 50a70800000000000000 |     mrmovq 8(%rdi), %r10
0x314: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x316: 40a60800000000000000 |     rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x320: 713303000000000000   | 	jle l1		# if so, goto Npos:
0x329: c0f00100000000000000 |     iaddq $1, %rax		# count++
0x333:                      | l1:
0x333: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x33d: 62aa                 | 	andq %r10, %r10		
0x33f: 40a60000000000000000 |     rmmovq %r10, (%rsi)	
0x349: 715c03000000000000   | 	jle Done		
0x352: c0f00100000000000000 |     iaddq $1, %rax		
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x35c:                      | Done:
0x35c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x35d:                      | End:
                            | #/* $end ncopy-ys */

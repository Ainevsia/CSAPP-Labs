# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Sample linked list
# typedef struct ELE {
#     long val;
#     struct ELE *next;
# } *list_ptr;
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad ele4
ele4:
	.quad 0x00a000
	.quad ele5
ele5:
	.quad 0x0b0000
	.quad ele6
ele6:
	.quad 0xc00000
	.quad 0

main:	
	irmovq ele1,%rdi
	call rsum_list		# rsum_list(ele1)
	ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:	
	andq %rdi,%rdi	     # test ls
	jne	Recur        	 # Goto Recursive
	xorq %rax,%rax
	ret
Recur:
	# long val = ls->val;
	mrmovq (%rdi),%r10
	# long rest = rsum_list(ls->next); 
	mrmovq 8(%rdi),%rdi
	pushq %r10
	call rsum_list
	popq %r10
	# return val + rest;
	addq %r10,%rax
	ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
